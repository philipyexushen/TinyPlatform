<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
										xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
										xmlns:local="clr-namespace:UrgencyRescuePlatform"
										xmlns:sys="clr-namespace:System;assembly=mscorlib">
	<local:ImagePathConverter x:Key="imagePathConverter"/>
	<Style x:Key="_style_mapSelectionComboBox" TargetType="ComboBoxItem">
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Background" Value="AliceBlue"></Setter>
				<Setter Property="BorderBrush" Value="#FFFCBB6F"></Setter>
			</Trigger>
			<Trigger Property="IsSelected" Value="False">
				<Setter Property="Background" Value="Transparent"></Setter>
				<Setter Property="BorderBrush" Value="AliceBlue"></Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<DataTemplate x:Key="_dataTemplate_mapSelectionComboBox">
		<DockPanel LastChildFill="True">
			<Grid>
				<Border DockPanel.Dock="Left"
							Margin="1" BorderThickness="3" CornerRadius="4"
							BorderBrush="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ComboBoxItem}},Path=BorderBrush}"
							Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ComboBoxItem}},Path=Background}"
							
							HorizontalAlignment="Stretch">
					<Border>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>

							<Image Grid.Column="0" Width="30" Height="20" VerticalAlignment="Center" HorizontalAlignment="Center"
									 Source="{Binding Path=SnapSource,Converter={StaticResource imagePathConverter}}"
									 Margin="3"></Image>
							<TextBlock Grid.Column="1" Text="{Binding Path=ProviderName}" TextAlignment="Left" FontWeight="Bold"
											 Margin="3"
											 HorizontalAlignment="Stretch"
											 VerticalAlignment="Center"/>
						</Grid>
					</Border>
				</Border>
				<Border Background="Transparent"></Border>
			</Grid>
		</DockPanel>
	</DataTemplate>

	<Style x:Key="_style_mapAccessModeComboBoxItem" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid>
						<Border x:Name="border"></Border>
						<RadioButton Focusable="True" Margin="6"
												 IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsSelected,Mode=TwoWay}">
							<ContentPresenter VerticalAlignment="Center" />
						</RadioButton>
						<Border Background="Transparent"></Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Background" Value="AliceBlue" TargetName="border"></Setter>
							<Setter Property="BorderBrush" Value="Gray"  TargetName="border"></Setter>
							<Setter Property="BorderThickness" Value="1" TargetName="border"></Setter>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="LightBlue" TargetName="border"></Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="_controlTemplate_zoomButton" TargetType="{x:Type Button}">
		<Grid>
			<Border x:Name="outsideBorder" BorderBrush="{x:Null}" Opacity="0"/>
			<Border x:Name="innerBorder" BorderBrush="{x:Null}" Margin="3" Background="{TemplateBinding Background}"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Margin" TargetName="innerBorder" Value="1"/>
				<Setter Property="Background" TargetName="outsideBorder" Value="White"/>
			</Trigger>
			<Trigger Property="IsPressed"  Value="True">
				<Setter Property="Margin" TargetName="innerBorder" Value="1"/>
				<Setter Property="Background" TargetName="outsideBorder" Value="White"/>
				<Setter Property="Opacity" TargetName="outsideBorder" Value="0.2"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ImageBrush x:Key="windowIcon">
		<ImageBrush.ImageSource>
			<BitmapImage UriSource="/UrgencyRescuePlatform;component/icon.ico"/>
		</ImageBrush.ImageSource>
	</ImageBrush>

	<SolidColorBrush x:Key="_brush_menuBackgroundColor" Color="#FF4E4E4E"/>
	<SolidColorBrush x:Key="MenuMouseOverBackground" Color="#FFA09F9F"/>
	<SolidColorBrush x:Key="MenuPressedBackground" Color="Gray"/>
	<SolidColorBrush x:Key="MenuMouseOverForeground" Color="White"/>
	<SolidColorBrush x:Key="MenuPressedForeground" Color="White"/>
	<SolidColorBrush x:Key="IsnEnable" Color="#FF4F4F4F"/>
	<sys:Double x:Key="fontSize">13</sys:Double>

	<Style x:Key="_style_blackMenuItem" TargetType="{x:Type MenuItem}">
		<Setter Property="Background" Value="{StaticResource _brush_menuBackgroundColor}"/>
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="FontSize" Value="{StaticResource fontSize}"/>
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="Margin" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type MenuItem}">
					<!--Item-->
					<Border x:Name="border" 
									Background="Transparent" 
									Height="{TemplateBinding Height}" 
									Opacity="1">
						<Grid VerticalAlignment="Center" Margin="{TemplateBinding Margin}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition x:Name="icon_col" MaxWidth="35" SharedSizeGroup="MenuItemIconColumnGroup"/>
								<ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
								<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
								<ColumnDefinition Width="16" x:Name="arrow_col" SharedSizeGroup="MenumItemArrow"/>
							</Grid.ColumnDefinitions>
							<!--Header-->
							<ContentPresenter Grid.Column="1" x:Name="txtHeader" Margin="3,1,5,1" MinWidth="90"
																RecognizesAccessKey="True" VerticalAlignment="Center" ContentSource="Header"/>
							<!--右指针-->
							<Image x:Name="PART_Arrow" Height="8" Width="8" Source="/treeViewItem/treeViewItemMore_Fold.png"/>
							<!--淡出子集菜单容器-->
							<Popup x:Name="SubMenuPopup" AllowsTransparency="true" 
										 IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
										 Placement="Bottom" Focusable="false" VerticalOffset="0"
										 PopupAnimation="Fade">
								<Border Background="{TemplateBinding Background}"  
												CornerRadius="0" Margin="5" 
												BorderBrush="{TemplateBinding BorderBrush}" 
												BorderThickness="{TemplateBinding BorderThickness}">
									<Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
										<Border BorderBrush="Black">
											<Border.Effect>
												<DropShadowEffect ShadowDepth="0" BlurRadius="5"></DropShadowEffect>
											</Border.Effect>
										</Border>
										<StackPanel Margin="0" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
									</Grid>
								</Border>
							</Popup>
						</Grid>
					</Border>
					<!--触发器-->
					<ControlTemplate.Triggers>
						<!--TopLevelHeader:第一级菜单（有子菜单）-->
						<Trigger Property="Role" Value="TopLevelHeader">
							<Setter Property="Visibility" Value="Visible" TargetName="PART_Arrow"/>
							<Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
							<Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
							<Setter Property="Width" Value="0" TargetName="arrow_col"/>
						</Trigger>
						<!--TopLevelItem 第一级菜单（无子级）-->
						<Trigger Property="Role" Value="TopLevelItem">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
							<Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
							<Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
							<Setter Property="Width" Value="0" TargetName="arrow_col"/>
						</Trigger>
						<!--SubmenuHeader:子菜单，有子菜单-->
						<Trigger Property="Role" Value="SubmenuHeader">
							<Setter Property="Visibility" Value="Visible" TargetName="PART_Arrow"/>
							<Setter Property="Placement" Value="Right" TargetName="SubMenuPopup"/>
						</Trigger>
						<!--SubMenuItem:子菜单，无子级-->
						<Trigger Property="Role" Value="SubMenuItem">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
						</Trigger>
						<!--高亮状态-->
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource MenuMouseOverBackground}"></Setter>
							<Setter Property="Foreground" Value="{StaticResource MenuMouseOverForeground}"></Setter>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource MenuPressedBackground}"></Setter>
							<Setter Property="Foreground" Value="{StaticResource MenuPressedForeground}"></Setter>
						</Trigger>
						<!--子菜单打开状态-->
						<Trigger Property="IsSubmenuOpen" Value="true" >
							<Setter TargetName="PART_Arrow" Property="Source" 
											Value="/treeViewItem/treeViewItemMore_Unfold.png"></Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource IsnEnable}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--MenuItem Header模板-->
	<Style x:Key="DefaultMenuItem" TargetType="{x:Type MenuItem}" 
				 BasedOn="{StaticResource _style_blackMenuItem}">
		<Setter Property="HeaderTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock FontSize="{Binding FontSize,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}" 
										 Text="{Binding Header,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}" 
										 Foreground="{Binding Foreground,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}"
										 HorizontalAlignment="Stretch" VerticalAlignment="Center"
										 Margin="3,1,5,1"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--黑色样式的ContextMenu样式-->
	<Style x:Key="DefaultMenu" TargetType="{x:Type ContextMenu}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
		<Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource DefaultMenuItem}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" 
									BorderThickness="{TemplateBinding BorderThickness}"
									Background="{TemplateBinding Background}" 
									Padding="{TemplateBinding Padding}"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<ItemsPresenter Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<SolidColorBrush x:Key="ScrollBarLineButtonBrush" Color="#FF888D91"/>
	<SolidColorBrush x:Key="ScrollBarLineButtonHoverBrush" Color="#FF1286A9"/>
	<SolidColorBrush x:Key="ScrollBarThumbBrush" Color="#FF686868"/>
	<SolidColorBrush x:Key="ScrollBarThumbHoverBrush" Color="#FFC8C8C8"/>
	<SolidColorBrush x:Key="StandardBoarderBrush" Color="#FF515151"/>
	<SolidColorBrush x:Key="StandardBackgroundBrush" Color="#FF252526" />

	<Style x:Key="ScrollBarLineUpButtonStyle" TargetType="{x:Type RepeatButton}">
		<Setter Property="Focusable" Value="False"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid>
						<Path HorizontalAlignment="Center" VerticalAlignment="Center"
							  Name="triangle" Fill="{StaticResource ScrollBarLineButtonBrush}"
							  Data="M 0 4 L 8 4 L 4 0 Z"/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="triangle" Property="Fill" 
									Value="{StaticResource ScrollBarLineButtonHoverBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarLineDownButtonStyle" TargetType="{x:Type RepeatButton}">
		<Setter Property="Focusable" Value="False"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid>
						<Path HorizontalAlignment="Center" VerticalAlignment="Center"
							  Name="triangle" Fill="{StaticResource ScrollBarLineButtonBrush}"
							  Data="M 0 0 L 8 0 L 4 4 Z"/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="triangle" Property="Fill" 
									Value="{StaticResource ScrollBarLineButtonHoverBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Margin" Value="1,0,1,0" />
		<Setter Property="Background" Value="{StaticResource StandardBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{StaticResource StandardBoarderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Rectangle Name="thumb" Fill="{StaticResource ScrollBarThumbBrush}"></Rectangle>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="thumb" Property="Fill" Value="{StaticResource ScrollBarThumbHoverBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border Background="Transparent" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid Background="#FF3E3E42">
			<Grid.RowDefinitions>
				<RowDefinition MaxHeight="18"></RowDefinition>
				<RowDefinition Height="*"></RowDefinition>
				<RowDefinition MaxHeight="18"></RowDefinition>
			</Grid.RowDefinitions>

			<RepeatButton Grid.Row="0" Height="18"
						  Style="{StaticResource ScrollBarLineUpButtonStyle}"
						  Command="ScrollBar.LineUpCommand">
			</RepeatButton>

			<Track Name="PART_Track" Grid.Row="1"
				   IsDirectionReversed="True">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="ScrollBar.PageUpCommand"
								  Style="{StaticResource ScrollBarPageButtonStyle}"></RepeatButton>
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb Style="{StaticResource ScrollBarThumbStyle}"/>
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="ScrollBar.PageDownCommand"
								  Style="{StaticResource ScrollBarPageButtonStyle}"></RepeatButton>
				</Track.IncreaseRepeatButton>
			</Track>

			<RepeatButton Grid.Row="2" Height="18"
						  Style="{StaticResource ScrollBarLineDownButtonStyle}"
						  Command="ScrollBar.LineDownCommand">
			</RepeatButton>
		</Grid>
	</ControlTemplate>

	<Style TargetType="{x:Type ScrollBar}">
		<Setter Property="SnapsToDevicePixels" Value="True"></Setter>
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="Width" Value="18"></Setter>
		<Setter Property="Height" Value="Auto"></Setter>
		<Setter Property="Template" Value="{StaticResource VerticalScrollBar}"></Setter>
	</Style>

	<SolidColorBrush x:Key="treeviewTextForeground" Color="White"/>
	<SolidColorBrush x:Key="treeViewItemSelectedBackground" Color="#FFA09F9F"/>
	<SolidColorBrush x:Key="treeViewItemSelectedActiveBackground" Color="#FF007ACC"/>
	<SolidColorBrush x:Key="logoutTreeViewItemBackground" Color="#FFD68D07"/>
	<sys:Double x:Key="treeViewToggleIconSize">10</sys:Double>

	<!--TreeViewItem默认样式-->
	<Style  x:Key="BaseedTreeViewItem" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Foreground" Value="{StaticResource treeviewTextForeground}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<StackPanel>
						<Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
																BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
																MinHeight="{TemplateBinding MinHeight}" 
															  UseLayoutRounding="True" 
																SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Grid Margin="{TemplateBinding Margin}" VerticalAlignment="Stretch">
								<Grid.ColumnDefinitions>
									<ColumnDefinition MinWidth="18" Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<!--展开收缩按钮-->
								<ToggleButton x:Name="ExpanderBtn" 
															IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
															ClickMode="Press">
									<ToggleButton.Template>
										<ControlTemplate TargetType="ToggleButton">
											<Border>
												<ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" 
																					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
											</Border>
										</ControlTemplate>
									</ToggleButton.Template>
									<ToggleButton.Content>
										<Image x:Name="ExpanderIcon" Source="/treeViewItem/treeViewItemMore_Fold.png" 
													 Height="{StaticResource treeViewToggleIconSize}"
													 Width="{StaticResource treeViewToggleIconSize}"/>
									</ToggleButton.Content>
								</ToggleButton>
								<!--内容-->
								<ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header"
																	SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
																	HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																	VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</Border>
						<ItemsPresenter Margin="18,0,0,0" x:Name="ItemsHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="False">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsExpanded" Value="True">
							<Setter TargetName="ExpanderIcon" Property="Source" Value="/treeViewItem/treeViewItemMore_Unfold.png" />
						</Trigger>
						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="ExpanderIcon" Property="Visibility" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Background" Value="{StaticResource treeViewItemSelectedBackground}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="Selector.IsSelectionActive" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource treeViewItemSelectedActiveBackground}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
		</Style.Triggers>
	</Style>

	<Style x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}"
				 BasedOn="{StaticResource BaseedTreeViewItem}">
		<Setter Property="Background" Value="Transparent" />
	</Style>

	<Style x:Key="LogoutTreeViewItem" TargetType="{x:Type TreeViewItem}"
				 BasedOn="{StaticResource BaseedTreeViewItem}">
		<Setter Property="Background" Value="{StaticResource logoutTreeViewItemBackground}" />
	</Style>
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="_style_blackButtonMouseOver" Color="#FF6C6C6C"/>
	<SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
	<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
	<SolidColorBrush x:Key="_style_blackButtonPressed" Color="#FF0083C7"/>
	<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
	<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
	<Style x:Key="_style_toggleButton_openInputBox" TargetType="{x:Type ToggleButton}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="BorderBrush" Value="White"/>
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Margin" Value="3"/>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" Background="#FF3D3C3C" Padding="10,3">
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Button.IsDefaulted" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource _style_blackButtonMouseOver}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource _style_blackButtonPressed}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
							<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="_style_button_openInputBox" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="BorderBrush" Value="White"/>
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Margin" Value="8,3,3,3"/>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" Background="#FF3D3C3C" Padding="10,3">
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Button.IsDefaulted" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource _style_blackButtonMouseOver}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource _style_blackButtonPressed}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
							<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


</ResourceDictionary>